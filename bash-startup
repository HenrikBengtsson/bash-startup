#! /usr/bin/env bash
### Bash Startup Utility Functions
###
### This script defines utility functions for the Bash startup sequence,
### specificially, startup_source_d() sources all _executable_ scripts in a set
### of folders (recursively) conditionally on pathname-specific tags.
### This script is preferrably sourced from ~/.bashrc or similar.
###
### USAGE:
### . /path/to/bash-startup [options] folder folder2 ...
### . /path/to/bash-startup; startup [options] folder folder2 ...
### . /path/to/bash-startup; startup_source_d folder folder2 ...
###
### Options:
###  --reset       resets timer when calling startup()
###
###  --help        Display this help
###  --version     Display version
###
###  --dryrun      Dry run with output without sourcing anything
###  --verbose     Display verbose messages
###  --debug       Display debug messages ("more verbose")
###
###
### EXAMPLES:
### The easiest way is to source the bash-startup script with a set of folders:
###
###   . /path/to/bash-startup ~/.bashrc.d
###   . /path/to/bash-startup --debug ~/.bashrc.d
###   STARTUP_DEBUG=true . /path/to/bash-startup ~/.bashrc.d
###
### The bash-startup script can also be used to import a set of functions
### (startup and startup_source_d) and then call those afterward, e.g.
###
###   . /path/to/bash-startup
###   startup /etc/bashrc
###   startup --debug ~/.bashrc.d
###
### or
###
###   . /path/to/bash-startup
###   startup_source_d /etc/bashrc
###   STARTUP_DEBUG=true startup_source_d ~/.bashrc.d
###
### FILE AND DIRECTORY NAME FILTERS:
### It is only files that are _executable_ that are considered; all other
### files are ignored.  Further more, files matching *~, *#, or #* are
### always dropped.
### Files and directories are filtered based on key-value rules incorporated
### in their names.  Such key-value rules are separated by commas (,) or
### folder separators (/).  The following key-value rules are supported:
###
###  - a=x               keep if value of 'a' is 'x'
###  - a=x%OR%y%OR%z     keep if value of 'a' is 'x', 'y', or 'z'
###  - a!=x              keep if value of 'a' is not 'x'
###  - a!=x%OR%y%OR%z    keep if value of 'a' is neither 'x', 'y', nor 'z'
####  - a%HAS%x           keep if value of 'a' contains 'x'
####  - a%HAS%x%OR%y%OR%z keep if value of 'a' contains 'x', 'y', or 'z'
###
### where key 'a' is any environment variable or one of the following
### predefined variables:
###
###  - 'interactive'  'true' if env var 'PS1' is set, otherwise 'false'
###
### A value 'x' must _not_ contain a folder separator (/), a period (.),
### a comma (,), or any of the logical operators (%OR%).
###
### If a pathname (path + filename) has multiple key-value pairs, then all
### key-value rules must be fulfilled in order for the pathname not to be 
### dropped by the filtering.  For example, file
###
###  ~/.bashrc.d/interactive=true/z.USER!=alice%OR%bob/hello,PAPERSIZE=a4.sh
###
### will only be used in an interactive Bash session, if the USER is neither
### 'alice' nor 'bob', and the PAPERSIZE is set to 'a4'.
###
###
### DEBUGGING AND TESTING:
### To debug what files are sourced and how long each of them takes set
### STARTUP_DEBUG=1.  To perform a dry run set STARTUP_DRYRUN=1.
### If calling startup(), these may be setup (temporarily) by using
### options --debug and --dryrun, respectively.
###
### Version: 0.2.2-9000
### Copyright: Henrik Bengtsson (2017)
### License: GPL (>= 3.0)
### Source: https://github.com/HenrikBengtsson/bash-startup


## ---------------------------------------------------------------------------
##  Private functions
## ---------------------------------------------------------------------------
_STARTUP_COLOR_SUPPORTED=false
tput sgr0 2> /dev/null && _STARTUP_COLOR_SUPPORTED=true

function _startup_color_msg() {
    local color=$1
    shift
    if $_STARTUP_COLOR_SUPPORTED; then
        tput setaf "$color"
        echo "$*"
        tput sgr0
    else
        echo "$*"
    fi
}

function _startup_color_msgf() {
    local color=$1
    shift
    local fmt=$1
    shift
    if $_STARTUP_COLOR_SUPPORTED; then
        tput setaf "$color"
	# shellcheck disable=SC2059
        printf "$fmt" "$@"
        tput sgr0
    else
	# shellcheck disable=SC2059
        printf "$fmt" "$@"
    fi
}

function _startup_debug() {
    >&2 _startup_color_msg 8 "$(_startup_duration)s: $*"  ## gray
}

function _startup_debugf() {
    local fmt=$1
    shift
    >&2 _startup_color_msgf 8 "$(_startup_duration)s: $fmt" "$@" ## gray
}

function _startup_warn() {
    >&2 _startup_color_msg 3 "WARNING: $*"  ## yellow
}

function _startup_error() {
    >&2 _startup_color_msg 1 "ERROR: $*"  ## red
}

function _startup_help() {
    local res=
    res=$(grep -E "^###([ ].*|)$" "$1" | cut -b 5-)
    printf '%s\\n' "${res[@]}"
}

function _startup_version() {
    grep -E "^###[ ]+Version: " "$1" | sed -E 's/.*Version:[ ]+//g' | sed 's/ //g'
}

## Keeps track of processing times

function _startup_duration_reset() {
    _STARTUP_START_TIME=$(($(date +%s%N)/1000000))
}

function _startup_duration() {
    local d=$(($(($(date +%s%N)/1000000)) - _STARTUP_START_TIME))
    d=$(echo 000$d | sed -E 's/([0-9]{3})$/.\1/' | sed -E 's/^0*([0-9])/\1/')
    echo "$d"
}

## If not already defined, reset timer
if [[ ! -v _STARTUP_START_TIME ]]; then
    _STARTUP_START_TIME=
    _startup_duration_reset
fi

function _startup_find_all_keys() {
    ## Identify all unique <key>:s in string with <key>=<value>, which are
    ## separated by path separators ('/'), commas (','), and periods ('.').
    printf "%s\\n" "$@" | grep -E "([[:alnum:]]+)(=|!=)" | sed -E 's/[.][^.]*$//' | sed -E 's/[.,/]/\n/g' | grep -E "([[:alnum:]]+)(=|!=)" | sed -E 's/(=|!=).*//g' | LC_ALL=C sort -u
}

function _startup_filter_by_key() {
    local op=$1
    shift
    local key=$1
    eval value="\$$key"
    shift

    ## Ignore case when filtering on logical values 
    if [[ $value =~ ^(true|TRUE)$ ]]; then
        value="true|TRUE"
    elif [[ $value =~ ^(false|FALSE)$ ]]; then
        value="false|FALSE"
    fi
    
    ## This requires negative-lookahead regular expression, which in turn
    ## requires an PCRE-enabled grep, hence the 'grep --perl-regexp' call.
    if [[ $op == EQUAL ]]; then
        ## Match strings with $key=$value-pattern that does _not_
        ## have the correct $value-pattern
        local neq='!'
        local value_pattern="$value|[^,=!/]+%OR%$value)([.,/]|=|!=|%OR%.*|$"
        local pattern="$key=(?$neq($value_pattern))"
        ## Return the complementary of the above match
        printf "%s\\n" "$@" | grep --perl-regexp -v "$pattern"
    elif [[ $op == NOT_EQUAL ]]; then
        ## Match strings with $key!=$value-pattern that _does_
        ## have the correct $value-pattern
        local value_pattern="$value|[^,=!/]+%OR%$value)([.,/]|=|!=|%OR%.*|$"
        local pattern="$key!=(?=($value_pattern))"
        ## Return the complementary of the above match
        printf "%s\\n" "$@" | grep --perl-regexp -v "$pattern"
    else
#        _startup_warn "Ignoring non-supported filter operator: $op"
        printf "%s\\n" "$@"
    fi
}


function _startup_find_all_files() {
    find -L "$1" -executable -type f ! -name '*~' ! -name '#*' ! -name '*#' 2> /dev/null | LC_ALL=C sort
}


## ---------------------------------------------------------------------------
## Public functions
## ---------------------------------------------------------------------------
function startup_source_d() {
    local source_d_path=$1

    if [[ $# -eq 0 ]]; then
        _startup_error "startup_source_d: path not specified"
        return 1
    elif [[ ! -d "$source_d_path" ]]; then
        if [[ ${STARTUP_ON_ERROR:-error} == error ]]; then
            _startup_error "startup_source_d: no such path: $source_d_path"
        elif [[ $STARTUP_ON_ERROR == warn ]]; then
            _startup_warn "startup_source_d: no such path: $source_d_path"
        fi
        return 1
    fi

    local debug=$STARTUP_DEBUG
    if [[ $debug = false ]]; then
        debug=0
    elif [[ $debug = true ]]; then
        debug=1
    fi
    
    local prefix=
    local dryrun=false
    if [[ -n "$STARTUP_DRYRUN" ]]; then
        prefix="[DRYRUN] "
        dryrun=true
    fi

    ## Temporary variables used below
    local dropped=
    local value=
    
    [[ $debug -ge 1 ]] && _startup_debug "Sourcing folder $source_d_path ..."

    ## Find all files
    # shellcheck disable=SC2207
    local source_d_files=($(_startup_find_all_files "$source_d_path"))

    ## Filter on <key>=<value>, ... tags?
    # shellcheck disable=SC2207
    local keys=($(_startup_find_all_keys "${source_d_files[@]}"))
    if [[ ${#keys[@]} -gt 0 ]]; then
        [[ $debug -ge 2 ]] && _startup_debug "- Filtering based on ${#keys[@]} keys ..."

        ## Pre-define keys
        local interactive=true
        if [[ -z "$PS1" ]]; then interactive=false; fi
        
        ## Ignore empty-value or non-set keys?
        if [[ -z $STARTUP_KEEP_EMPTY_KEYS ]]; then
            local keys_tmp=()
            for key in "${keys[@]}"; do
                eval value="\$$key"
                [[ -z $value ]] && continue
                keys_tmp+=("$key")
            done
            if [[ $debug -ge 2 ]]; then
                # shellcheck disable=SC2207
                dropped=($(comm --nocheck-order -23 <(printf "%s\\n" "${keys[@]}" | LC_ALL=C sort) <(printf "%s\\n" "${keys_tmp[@]}" | LC_ALL=C sort)))
                if [[ ${#dropped[@]} -ne 0 ]]; then
                    _startup_debug "  + Dropped ${#dropped[@]} keys with empty values: ${dropped[*]}"
                fi
            fi
            keys=("${keys_tmp[@]}")
        fi
        if [[ $debug -ge 2 ]]; then
            _startup_debug "  + Keys to filter on (n=${#keys[@]}): ${keys[*]}"
            _startup_debug "  + Predefined keys: interactive=$interactive"
        fi

        
        ## Filter files
        if [[ $debug -ge 2 ]]; then
            _startup_debug "  + Number of files before: ${#source_d_files[@]}"
            local ii=
            for ii in "${!source_d_files[@]}"; do
               _startup_debugf "    %2d. %s\\n" "$((ii + 1))" "${source_d_files[$ii]}"
            done
	fi
	
        local source_d_files_tmp=()
        for key in "${keys[@]}"; do
            [[ $debug -ge 2 ]] && _startup_debug "    - Number of files before: ${#source_d_files[@]}"
            for op in EQUAL NOT_EQUAL; do
                # shellcheck disable=SC2207
                source_d_files_tmp=($(_startup_filter_by_key $op "$key" "${source_d_files[@]}"))
                if [[ $debug -ge 2 ]]; then
                    eval value="\$$key"
                    # shellcheck disable=SC2207
                    dropped=($(comm --nocheck-order -23 <(printf "%s\\n" "${source_d_files[@]}" | LC_ALL=C sort) <(printf "%s\\n" "${source_d_files_tmp[@]}" | LC_ALL=C sort)))
                    if [[ ${#dropped[@]} -eq 0 ]]; then
                        _startup_debug "    - $op filtering with '$key' (='$value'): dropped 0 files"
                    else
                        _startup_debug "    - $op filtering with '$key' (='$value'): dropped ${#dropped[@]} files (\"${dropped[*]}\")"
                    fi
                fi
                # shellcheck disable=SC2206
                source_d_files=(${source_d_files_tmp[@]})
                
                [[ $debug -ge 2 ]] && _startup_debug "    - Number of files after: ${#source_d_files[@]}"
            done
        done
        
        [[ $debug -ge 2 ]] && _startup_debug "  + Number of files after: ${#source_d_files[@]}"
        [[ $debug -ge 2 ]] && _startup_debug "- Filtering based on ${#keys[@]} keys ... done"
    fi

    
    ## Source remaining files
    [[ $debug -ge 1 ]] && _startup_debug "- Sourcing ${#source_d_files[@]} files ..."
    local ii=
    for ii in "${!source_d_files[@]}"; do
        ( [[ $debug -ge 1 ]] || $dryrun ) && _startup_debugf "$prefix  %2d. %s\\n" "$((ii + 1))" "${source_d_files[$ii]}"
        $dryrun && continue
        # shellcheck disable=SC1090
        source "${source_d_files[$ii]}"
    done
    [[ $debug -ge 1 ]] && _startup_debug "- Sourcing ${#source_d_files[@]} files ...done"

    [[ $debug -ge 1 ]] && _startup_debug "Sourcing folder $source_d_path ... done"

    return 0
} ## startup_source_d()


function startup() {
    ## Record startup env vars
    local org_debug=$STARTUP_DEBUG
    local org_dryrun=$STARTUP_DRYRUN
    local org_onerror=$STARTUP_ON_ERROR
    local org_emptykeys=$STARTUP_KEEP_EMPTY_KEYS

    local cmdargs=$*
    local action=
    local reset=false
    local debug=0
    local items=()
   
    # Parse command-line options
    while [[ $# -gt 0 ]]; do
        if [[ "$1" == "--help" ]]; then
            action=help
        elif [[ "$1" == "--version" ]]; then
            action=version
        elif [[ "$1" == "--verbose" ]]; then
            STARTUP_DEBUG=1
            debug=1
        elif [[ "$1" == "--debug" ]]; then
            STARTUP_DEBUG=2
            debug=2
        elif [[ "$1" == "--reset" ]]; then
            reset=true
        elif [[ "$1" == "--dryrun" ]]; then
            STARTUP_DRYRUN=true
        elif [[ $1 == "--emptykeys" ]]; then
            STARTUP_KEEP_EMPTY_KEYS=true
        elif [[ $1 == "--strict" ]]; then
            STARTUP_ON_ERROR=error
        elif [[ $1 == "--warn" ]]; then
            STARTUP_ON_ERROR=warn
        else
            items+=("$1")
        fi
        shift
    done

    ## Reset timer?
    $reset && _startup_duration_reset
    
    if [[ $debug -ge 2 ]]; then
        _startup_debug "startup() ..."
        _startup_debug "BASH_SOURCE (n=${#BASH_SOURCE[@]}): ${BASH_SOURCE[*]}"
        _startup_debug "Command-line arguments: $cmdargs"
        _startup_debug "STARTUP_KEEP_EMPTY_KEYS: ${STARTUP_KEEP_EMPTY_KEYS:-false}"
        _startup_debug "STARTUP_DEBUG: ${STARTUP_DEBUG:-false}"
        _startup_debug "STARTUP_DRYRUN: ${STARTUP_DRYRUN:-false}"
        _startup_debug "STARTUP_ON_ERROR: ${STARTUP_ON_ERROR:-error}"
        _startup_debug "action: $action"
    fi
    
    if [[ $action == help ]]; then
        _startup_help "${BASH_SOURCE[0]}"
        return 0
    elif [[ $action == version ]]; then
        _startup_version "${BASH_SOURCE[0]}"
        return 0
    else
        [[ $debug -ge 2 ]] && _startup_debug "Processing ${#items[@]} files or folders: ${items[*]}"
        for item in "${items[@]}"; do
           startup_source_d "$item"
        done
    fi

    ## Reset orginal startup env vars
    STARTUP_DEBUG=$org_debug
    STARTUP_DRYRUN=$org_dryrun
    STARTUP_ON_ERROR=$org_onerror
    STARTUP_KEEP_EMPTY_KEYS=$org_emptykeys
    
    [[ $debug -ge 2 ]] && _startup_debug "startup() ... done"
}


## ---------------------------------------------------------------------------
## Deprecated functions
## ---------------------------------------------------------------------------
function source_d() {
    startup_source_d "$@"
}

function bash_startup() {
    startup "$@"
}


## ---------------------------------------------------------------------------
## Main
## ---------------------------------------------------------------------------
## Make sure script is source:ed
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
    _startup_error "The $0 script should not be called directly, but rather be source:d (or .:ed), i.e. either as 'source $0' or '. $0'."
    exit 1
fi

## Process command-line arguments, if any
if [[ $# -gt 0 ]]; then
    startup "$@"
    return $?
fi

_startup_duration_reset

return 0

